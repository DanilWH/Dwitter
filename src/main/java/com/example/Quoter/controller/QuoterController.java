package com.example.Quoter.controller;

import com.example.Quoter.domain.Quote;
import com.example.Quoter.domain.User;
import com.example.Quoter.domain.dto.QuoteDto;
import com.example.Quoter.repos.QuoteRepo;
import com.example.Quoter.service.QuoteService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;

import javax.persistence.NoResultException;
import javax.validation.Valid;
import java.io.IOException;
import java.util.Map;
import java.util.Set;

@Controller
public class QuoterController {
    @Autowired // This means to get the bean called quoteRepo
               // Which is auto-generated by Spring, we will use it to handle the data
    private QuoteRepo quoteRepo;

    @Value("${upload.path}")
    private String uploadPath;

    @Autowired
    private QuoteService quoteService;
    
    @GetMapping("/")
    public String greeting(Map<String, Object> model) {
        return "greeting";
    }
    
    @GetMapping("/main")
    public String main(
            @AuthenticationPrincipal User currentUser,
            @RequestParam(required=false, defaultValue="") String filter,
            Map<String, Object> model,
            @PageableDefault(sort = { "id" }, direction = Sort.Direction.DESC) Pageable pageable
    ) {
        Page<QuoteDto> page = this.quoteService.quoteList(pageable, filter, currentUser);

        model.put("page", page);
        model.put("url", "/main");
        model.put("pagerSequence", ControllerUtils.getPagerSequence(page));
        model.put("filter", filter);

        return "main";
    }
    
    @PostMapping("/main")
    // the form will be sent to the same page where it was sent from.
    public String add(
            @AuthenticationPrincipal User user,
            @Valid Quote quote,
            BindingResult bindingResult,
            @RequestParam("file") MultipartFile file,
            Model model
    ) throws IOException {
        quote.setAuthor(user);

        if (bindingResult.hasErrors()) {
            Map <String, String> errorsMap = ControllerUtils.getErrors(bindingResult);
            model.mergeAttributes(errorsMap);
            model.addAttribute("quote", quote);
        } else {
            ControllerUtils.saveFile(file, uploadPath, quote);

            this.quoteRepo.save(quote);
            // remove the quote from the model. Or else, when successful adding a quote, the user will see
            // the open form with the fields filled with the text that the user just added.
            model.addAttribute("quote", null);
        }
        
        Iterable<Quote> quotes = this.quoteRepo.findAll();

        model.addAttribute("quotes", quotes);
        
        return "main";
    }

    @GetMapping("/quotes/{quoteId}/like")
    public String like(
            @AuthenticationPrincipal User currentUser,
            @PathVariable("quoteId") Long quoteId,
            RedirectAttributes redirectAttributes,
            @RequestHeader(required = false) String referer
    ) {
        Quote quote = this.quoteRepo.findById(quoteId).orElseThrow(NoResultException::new);

        Set<User> likes = quote.getLikes();

        if (likes.contains(currentUser)) {
            likes.remove(currentUser);
        } else {
            likes.add(currentUser);
        }

        UriComponents components = UriComponentsBuilder.fromHttpUrl(referer).build();

        components.getQueryParams()
                .entrySet()
                .forEach(pair -> redirectAttributes.addAttribute(pair.getKey(), pair.getValue()));

        return "redirect:" + components.getPath();
    }

}
