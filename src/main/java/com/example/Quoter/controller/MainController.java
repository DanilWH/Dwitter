package com.example.Quoter.controller;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.Quoter.domain.Quote;
import com.example.Quoter.domain.User;
import com.example.Quoter.repos.QuoteRepo;

@Controller
public class MainController {
    @Autowired // This means to get the bean called quoteRepo
               // Which is auto-generated by Spring, we will use it to handle the data
    private QuoteRepo quoteRepo;
    
    @GetMapping("/")
    public String greeting(Map<String, Object> model) {
        return "greeting";
    }
    
    @GetMapping("/main")
    public String main(@RequestParam(required=false, defaultValue="") String filter, Map<String, Object> model) {
        Iterable<Quote> quotes;
        
        if (filter != null && !filter.isEmpty())
            // get the quotes that have the particular tag.
            quotes = this.quoteRepo.findByTag(filter);
        else
            quotes = this.quoteRepo.findAll();
        
        model.put("quotes", quotes);
        model.put("filter", filter);
        
        return "main";
    }
    
    @PostMapping("/main")
    // the form will be sent to the same page where it was sent from.
    public String add(
            @AuthenticationPrincipal User user,
            @RequestParam String text,
            @RequestParam String tag, Map<String, Object> model
    ) {
        // save the quote to the repository(database).
        Quote quote = new Quote(text, tag, user);
        this.quoteRepo.save(quote);
        
        return "redirect:/main";
    }
    
    /*
    @PostMapping("filter")
    public String filter(@RequestParam String filter, Map<String, Object> model) {
        if (filter != null && filter.isEmpty()) return "redirect:/main";
        
        // get the quotes that have the particular tag.
        List<Quote> filtered_quotes = this.quoteRepo.findByTag(filter);
        model.put("quotes", filtered_quotes);
        
        return "main";
    }
    */
}
